#include "cuauv.h"
#include "color.h"

constexpr int rotateInterval = 1000 / 15,
		  colorInterval = 1000 / 60,
		  drawInterval = 1000 / 60,
		  reverseInterval = 5000,
		  textFadeInterval = 1000 / 60;

constexpr double maxVel = 1;

constexpr int propWidth = 20, propFrames = 8;
const char* prop[] = {};

const rgb24 colors[] = {red, orange, yellow, green, blue, white};
constexpr int numColors = sizeof(colors) / sizeof(colors[0]);
constexpr double colorLerpInc = 0.01;
constexpr double textFadeLerpInc = 0.04;

Cuauv::Cuauv(Scheduler *sched, SmartMatrix *matrix): sched{sched}, matrix{matrix}, 
	rotateTID{0}, colorTID{0}, drawTID{0}, reverseTID{0}, frame{0}, direction{false},
	colorLerp{0}, colorI{0},
	textFadeLerp{0} {
	color = colors[0];
}

Cuauv::~Cuauv() {
	stop();
}

void Cuauv::begin() {
	rotateTID = sched->setInterval(this, rotateInterval);
	colorTID = sched->setInterval(this, colorInterval);
	drawTID = sched->setInterval(this, drawInterval);
	reverseTID = sched->setInterval(this, reverseInterval);
	textFadeTID = sched->setInterval(this, textFadeInterval);
}

void Cuauv::update(unsigned taskID) {
	if(taskID == rotateTID) {
		rotate();
	} else if(taskID == colorTID) {
		colorize();
	} else if(taskID == drawTID) {
		draw();
	} else if(taskID == reverseTID) {
		direction = !direction;
	} else if(taskID == textFadeTID) {
		textFadeLerp += textFadeLerpInc;
		if(textFadeLerp > 1) {
			textFadeLerp = 0;
		}
	}
}

void Cuauv::stop() {
	sched->clearInterval(rotateTID);
	sched->clearInterval(colorTID);
	sched->clearInterval(drawTID);
	sched->clearInterval(reverseTID);
	sched->clearInterval(textFadeTID);
}

void Cuauv::drawBitmap(int x, int y, int width, const rgb24& color, const char* str) {
	for(int xi = 0; xi != width; ++xi) {
		for(int yi = 0; yi != width; ++yi) {
			int index = yi * width + xi;
			if(str[index] == '1') {
				matrix->drawPixel(x + xi, y + yi, color);
			}
		}
	}
}

void Cuauv::draw() {
	matrix->fillScreen(black);
	drawBitmap(6, 1, propWidth, color, prop[(int)frame]);
	drawText();

	matrix->swapBuffers();
}

void Cuauv::rotate() {
	frame += (direction ? 1 : -1) + propFrames;
	frame = fmod(frame, propFrames);
}

void Cuauv::colorize() {
	colorLerp += colorLerpInc;
	if(colorLerp > 1) {
		colorLerp = 0;
		++colorI;
		if(colorI >= numColors) {
			colorI = 0;
		}
	}
	double antiLerp = 1 - colorLerp;
	int nextColorI = (colorI + 1) % numColors;

	color.red = antiLerp * colors[colorI].red + colorLerp * colors[nextColorI].red;
	color.green = antiLerp * colors[colorI].green + colorLerp * colors[nextColorI].green;
	color.blue = antiLerp * colors[colorI].blue + colorLerp * colors[nextColorI].blue;
}

void Cuauv::drawText() {
	matrix->setFont(font6x10);

	uint8_t brightness = 255 * (sin(2 * PI * textFadeLerp) * 0.25 + 0.75);

	matrix->drawString(1, 23, {brightness, 0, 0}, "CU");
	matrix->drawString(14, 23, {0, 0, brightness}, "AUV");

	matrix->setFont(font3x5);
}
